<div id="app">
        <article class="hentry">


            <header class="entry-header">
                <h1 class="entry-title">Панель управления</h1>
            </header>


            <!-- .entry-content -->
            <div class="entry-content">
                <div class="row">



                    <!-- col 6/12 -->
                    <div class="col-sm-7">



                        @*<h4>TOGGLES</h4>

                        <!-- .toggle-group -->
                        <div class="toggle-group">

                            <!-- .toggle -->
                            <div class="toggle">
                                <h4 class="">Plannig Your Design</h4>
                                <div class="toggle-content" style="display: none;">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable.</div>
                            </div>
                            <!-- .toggle -->
                            <!-- .toggle -->
                            <div class="toggle">
                                <h4 class="">Building A Framework</h4>
                                <div class="toggle-content" style="display: none;">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable.</div>
                            </div>
                            <!-- .toggle -->
                            <!-- .toggle opened on load -->
                            <!--<div class="toggle">
                                 <h4 class="active">UI/UX DEVELOPMENT</h4>
                                 <div class="toggle-content">This toggle content is shown on page load.</div>
                            </div>-->
                            <!-- .toggle -->

                        </div>
                        <!-- .toggle-group -->*@


                        @*<h4>Контент</h4>

                        <!-- .accordion -->
                        <div class="toggle-group accordion">

                            <!-- .toggle -->
                            <div class="toggle">
                                <h4 class="">What To Do Next?</h4>
                                <div class="toggle-content" style="display: none;">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable.</div>
                            </div>
                            <!-- .toggle -->
                            <!-- .toggle -->
                            <div class="toggle">
                                <h4 class="">Ok, But How?</h4>
                                <div class="toggle-content" style="display: none;">There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable.</div>
                            </div>
                            <!-- .toggle -->

                        </div>*@
                        <!-- .accordion -->
                        <!-- timeline -->
                        <div class="timeline">
                            <div v-for="(directoryModel, directoryIndex) in directoryModelsList">

                                <div class="event">
                                    <h2>{{directoryModel.directory.title}}</h2>
                                    <i class="pw-icon-bookmark-empty"></i>
                                    <p>
                                        <!-- Button trigger modal -->
                                        <button type="button" class="button" data-toggle="modal" v-bind:data-target="'#updateDirectoryModal' + directoryModel.directory.id">
                                            <i class="pw-icon-linkedin-squared"></i> Редактировать деррикторию
                                        </button>

                                        <!-- Modal -->
                                        <div class="modal fade" v-bind:id="'updateDirectoryModal' + directoryModel.directory.id" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                            <div class="modal-dialog" role="document">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h5 class="modal-title" id="exampleModalLabel">Редактирование дерриктории</h5>
                                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                            <span aria-hidden="true">&times;</span>
                                                        </button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <input type="text" v-model="directoryModel.directory.title" />
                                                    </div>
                                                    <div class="modal-footer">

                                                        @*<button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>*@
                                                        <button class="btn btn-secondary" v-on:click="removeDirectory(directoryModel)">Удалить деррикторию</button>
                                                        <button type="button" v-on:click="updateDirectory(directoryModel)" class="btn btn-primary">Сохранить деррикторию</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </p>

                                    <div>
                                        <!-- Button trigger modal -->
                                        <button type="button" data-toggle="modal" v-bind:data-target="'#createDirectoryMaterialModal' + directoryModel.directory.id">
                                            Создать материал
                                        </button>
                                        <!-- Modal -->
                                        <div class="modal fade" v-bind:id="'createDirectoryMaterialModal' + directoryModel.directory.id" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                            <div class="modal-dialog" role="document">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h5 class="modal-title" id="exampleModalLabel">Создание материала</h5>
                                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                            <span aria-hidden="true">&times;</span>
                                                        </button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <input type="text" v-model="directoryModel.newMaterialModel.title" />
                                                        <input type="text" v-model="directoryModel.newMaterialModel.category" />
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                                                        <button type="button" v v-on:click="createMaterial(directoryModel,directoryModel.newMaterialModel.title,directoryModel.newMaterialModel.category, directoryIndex)" class="btn btn-primary">Добавить материал</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Modal -->
                                        <div class="modal fade" v-bind:id="'updateDirectoryMaterialModal' + directoryModel.directory.id" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel">
                                            <div class="modal-dialog" role="document">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h5 class="modal-title" id="exampleModalLabel">Редактирование материала</h5>
                                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                            <span aria-hidden="true">&times;</span>
                                                        </button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <input type="text" v-model="currentMaterialModel.title" />
                                                        <input type="text" v-model="currentMaterialModel.category" />
                                                        <input v-bind:class="'currentMaterialModelPreviewFile-'+directoryModel.directory.id" type="file" @@change="previewFile(directoryModel, currentMaterialModel)"><br>

                                                        
                                                        <img v-bind:class="'currentMaterialModelPreviewImg-'+directoryModel.directory.id" v-bind:src="currentMaterialModel.smallPreview" height="200" alt="Image preview...">
                                                        @*<div class="summernote" v-model="currentMaterialModel.pageHtml">{{currentMaterialModel.pageHtml}}</div>*@
                                                        <textarea class="summernote" v-model="currentMaterialModel.pageHtml">{{currentMaterialModel.pageHtml}}</textarea>
                                                        <div>{{currentMaterialModel.order}}
                                                        </div>
                                                        <input type="radio" value="1" v-model="currentMaterialModel.status">
                                                        <label>Created</label>
                                                        <br>
                                                        <input type="radio" value="2" v-model="currentMaterialModel.status">
                                                        <label>Publish</label>
                                                        <br>
                                                        <input type="radio" value="3" v-model="currentMaterialModel.status">
                                                        <label>Delete</label>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                                                        <button type="button" v v-on:click="updateMaterial(directoryModel,currentMaterialModel,directoryIndex, currentMaterialModel.category)" class="btn btn-primary">Обновить материал</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div :class="dragging? 'list-dragging' : 'drag'" v-for="(category, key) in directoryModel.materials">
                                    {{key}}
                                    <draggable :list="category.materials" @@start="dragging=true" @@end="sortMaterials">
                                        <div class="categoryWrapper" v-for="(material, materialsIndex) in category"
                                             v-bind:data-directoryId="directoryModel.directory.id"
                                             v-bind:data-categoryId="material.material.category"
                                             v-bind:data-directoryIndex="directoryIndex">
                                            <div class="materialWrapper event"
                                                 v-bind:data-materialId="material.material.id"
                                                 v-bind:data-materialIndex="materialsIndex">
                                                <span class="date">
                                                    {{material.material.lastDateUpdate}}
                                                </span>
                                                <h4>{{ material.material.title }}</h4>
                                                <h5>{{ category.title }}</h5>
                                                <p>
                                                    <button v-on:click="removeMaterial(directoryModel,material,directoryIndex,key, materialsIndex)">Удалить материал</button>
                                                </p>
                                                <!-- Button trigger modal -->
                                                <button type="button" @@click="currentMaterialModel = material.material;currentMaterialModelDirectory = material.material.category; summernoteInit(currentMaterialModel) " data-toggle="modal" v-bind:data-target="'#updateDirectoryMaterialModal' + directoryModel.directory.id">
                                                    Редактировать материала
                                                </button>

                                            </div>
                                        </div>
                                    </draggable>
                                </div>

                            </div>
                        </div>
                        <!-- timeline -->

                        <p>
                            <!-- Button trigger modal -->
                            <button type="button" class="button" data-toggle="modal" data-target="#createDirectoryModal">
                                <i class="pw-icon-linkedin-squared"></i> Создать деррикторию
                            </button>
                            <!-- Modal -->
                            <div class="modal fade" id="createDirectoryModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="exampleModalLabel">Создание дерриктории</h5>
                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body">
                                            <input type="text" v-model="newDirectoryModel.title" />
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                                            <button type="button" v-on:click="createDirectory(newDirectoryModel.title)" class="btn btn-primary">Добавить деррикторию</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </p>


                    </div>
              


                </div>
            </div>
        </article>
</div>
<script src="https://unpkg.com/vue"></script>

<script type="text/javascript" src="/Vue.Draggable/examples/libs/Sortable/Sortable.js"></script>
<script type="text/javascript" src="/Vue.Draggable/dist/vuedraggable.min.js"></script>

@*<script type="text/javascript" src="script\main.js"></script>*@

<script>
    
    function directoryModelsListViewModel(directory, categotyes) {
        this.directory = directory;
        this.categoryes = categotyes;

        this.newMaterialModel = {
            title: '',
            category: ''
        }
    }

    function addNewMaterialModelToDirectoryModel(directory) {
        directory.newMaterialModel = {
            title: '',
            category: ''
        }
        return directory;
    }

    function DirectoryCatagory(categoryTitle = '', categoryMaterials) {
        this.title = categoryTitle;
        this.materials = categoryMaterials
    }

    function MaterialViewModel(material) {
        this.material = material;
    }

    var app = new Vue({
        el: '#app',
        data: {
            directoryModelsList: [],
            dragging: false,

            newDirectoryModel: {
                title: ''
            },
            currentDirectotyModel: {
                directory: { title: '' }

            },

            currentMaterialModel: {
                title: '',
                category: ''
            },
            currentMaterialModelDirectory: '',
            localFile: ''
        },
        methods: {

            loadData: function () {
                $.get("/Admin/getDirectoryesList", function (response) {
                    for (let i = 0; i < response.length; i++) {
                        addNewMaterialModelToDirectoryModel(response[i]);
                    }
                    app.directoryModelsList = response;
                }, "json");

                //var modal = $('.modal');
                //modal.modal({ backdrop: true, keyboard: true, show: false });

               
            },
            clearDirectoryModal: function () {
                this.newDirectoryModel.title = '';
                this.newDirectoryModel.category = '';
            },
            clearMaterialModal: function (directoryIndex) {
                this.directoryModelsList[directoryIndex].newMaterialModel.title = '';
                this.directoryModelsList[directoryIndex].newMaterialModel.category = '';
            },
            summernoteInit: function (currentMaterialModel) {
                
                //$('.summernote').summernote('destroy');

                $('.summernote').summernote({
                    prettifyHtml: false,
                    toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        //['font', ['strikethrough', 'superscript', 'subscript']],
                        //['fontsize', ['fontsize']],
                        //['color', ['color']],
                        ['para', ['style', 'ul', 'ol', 'paragraph']],
                        //['height', ['height']],
                        ['insert', ['picture', 'link', 'video', 'table', 'gxcode']],
                        // Add highlight plugin
                        //['highlight', ['highlight']],
                        ['misc', ['fullscreen', 'codeview']]
                    ],
                    callbacks: {
                        onChange: function (contents, $editable) {
                            currentMaterialModel.pageHtml = contents;
                        }
                    }
                    , onFocus: function (e) {
                        $('.note-dialog').parents().removeClass('animated');
                    }
                    ,dialogsInBody: true
                    , code: currentMaterialModel.pageHtml
                });

                $.each($('.summernote'), function () { 
                    $(this).summernote('code', currentMaterialModel.pageHtml);
                })
            },
            previewFile: function (directoryModel, currentMaterialModel) { 
                var preview = document.querySelector('.currentMaterialModelPreviewImg-'+directoryModel.directory.id);
                var file = document.querySelector('.currentMaterialModelPreviewFile-' + directoryModel.directory.id).files[0];
                var reader = new FileReader();

                reader.onloadend = function () {
                    //preview.src = reader.result;
                    currentMaterialModel.smallPreview = reader.result;
                }

                if (file) {
                   reader.readAsDataURL(file)
                } else {
                    preview.src = "";
                }
            },
            createDirectory: function (newDirectoryModelText) {
                let _newDirectoryWithCategory = new directoryModelsListViewModel({ title: newDirectoryModelText }, [new DirectoryCatagory('', [])]);

                $.post("/Admin/saveDirectory", { directoryJson: JSON.stringify(_newDirectoryWithCategory) }, function (response, textStatus) {
                    if (textStatus == 'success') {
                        let _directoryViewModel = addNewMaterialModelToDirectoryModel(response);
                        app.directoryModelsList.push(_directoryViewModel);
                        $("#createDirectoryModal").modal('hide');
                        app.clearDirectoryModal();
                    }
                    else
                        alert(textStatus);
                }, "json");
            },
            updateDirectory: function (directory) {
                directory.directory.id = 3005;

                $.post("/Admin/saveDirectory", { directoryJson: JSON.stringify(directory) }, function (response, textStatus) {

                    let directoryIndex = app.directoryModelsList.indexOf(
                        app.directoryModelsList.filter(function (x) { return x.directory.id == response.directory.id; })[0]
                    );

                    if (textStatus == 'success') {
                        Vue.set(app.directoryModelsList, directoryIndex, addNewMaterialModelToDirectoryModel(response));
                        //app.directoryModelsList[directoryIndex] = response;
                        $("#updateDirectoryModal" + response.directory.id).modal('hide');
                    }
                    else
                        alert(textStatus);
                }, "json");
            },
            removeDirectory: function (directory) {
                $.post("/Admin/removeDirectory", { directoryJson: JSON.stringify(directory) }, function (response, textStatus) {

                    let directoryIndex = app.directoryModelsList.indexOf(
                        app.directoryModelsList.filter(function (x) { return x.directory.id == response.directory.id; })[0]
                    );

                    if (textStatus == 'success') {
                        $("#updateDirectoryModal" + response.directory.id).modal('hide');
                        app.directoryModelsList.splice(directoryIndex, 1);
                    }
                    else
                        alert(textStatus);
                }, "json");
            },


            //#Materials
            createMaterial: function (directoryModel, title, category, directoryIndex) {

                let categoryIndex = this.directoryModelsList[directoryIndex].materials[category];

                let _newMaterial = new MaterialViewModel(
                    {
                        title: title,
                        directoryId: directoryModel.directory.id,
                        category: category,
                        order: typeof categoryIndex == 'undefined' ? 1 : this.directoryModelsList[directoryIndex].materials[category].length
                    });

                $.post("/Admin/saveMaterial", { materialJson: JSON.stringify(_newMaterial) }, function (response, textStatus) {
                    if (textStatus == 'success') {
                        _newMaterial = response;
                    }
                    else
                        alert(textStatus);
                }, "json");

                if (typeof categoryIndex == 'undefined') {
                    this.directoryModelsList[directoryIndex].materials[category] = [_newMaterial];//(new DirectoryCatagory(category, [_newMaterial]));
                }
                else {
                    this.directoryModelsList[directoryIndex].materials[category].push(_newMaterial);
                }
                $("#createDirectoryMaterialModal" + directoryModel.directory.id).modal('hide');
                this.clearMaterialModal(directoryIndex);
            },

            removeMaterial: function (directory, material, directoryIndex, categoryIndex, materialsIndex) {
                $.post("/Admin/removeMaterial", { materialJson: JSON.stringify(material) }, function (response, textStatus) {
                    if (textStatus == 'success') {
                        app.directoryModelsList[directoryIndex].materials[categoryIndex].splice(materialsIndex, 1);
                        if (app.directoryModelsList[directoryIndex].materials[categoryIndex].length == 0) {
                            app.directoryModelsList[directoryIndex].materials.splice(categoryIndex, 1);
                        }
                    }
                    else
                        alert(textStatus);
                }, "json");
            },
            updateMaterial: function (directory, material, directoryIndex, oldCategoryIndex) {

                let categoryIndex = this.directoryModelsList[directoryIndex].materials[app.currentMaterialModelDirectory];


                if (app.currentMaterialModelDirectory == material.category) {
                    //this.directoryModelsList[directoryIndex].materials[material.category][materialIndex] = [material];
                }
                else {
                    if (app.currentMaterialModelDirectory!="")
                    this.directoryModelsList[directoryIndex].materials[app.currentMaterialModelDirectory].splice(material, 1);
                    this.directoryModelsList[directoryIndex].materials[material.category].push(material);
                }
                
                material.pageHtml = $('.summernote:last').summernote('code');
                app.currentMaterialModelDirectory = material.category;
                debugger;
                $.post("/Admin/updateMaterial", { materialJson: JSON.stringify({ material: material }) }, function (response, textStatus) {
                    if (textStatus == 'success') {
                        material = response;
                    }
                    else
                        alert(textStatus);
                }, "json");


                $("#updateDirectoryMaterialModal" + directory.directory.id).modal('hide');
                this.clearMaterialModal(directoryIndex);

            },
            sortMaterials: function (evt) {
                dragging = false;

                let _fromMaterial = evt.oldIndex;
                let _toMaterial = evt.newIndex;
                //data-materialIds
                let itemEl = evt.item;  // dragged HTMLElement

                let _directoryId = itemEl.getAttribute('data-directoryId');
                let _directoryIndex = itemEl.getAttribute('data-directoryIndex');
                let _categoryId = _categoryIndex = itemEl.getAttribute('data-categoryId');
                let _materialId = itemEl.querySelector('.materialWrapper').getAttribute('data-materialId');
                let _materialIndex = itemEl.querySelector('.materialWrapper').getAttribute('data-materialIndex');


                $.post("/Admin/materialsSort", {
                    jsonMaterials: JSON.stringify({
                        materialFrom: app.directoryModelsList[_directoryIndex].materials[_categoryIndex][_materialIndex].material,
                        materialTo: app.directoryModelsList[_directoryIndex].materials[_categoryIndex][_toMaterial].material,
                    })
                }, function (response, textStatus) {
                    if (textStatus == 'success') {
                        //material = response;
                        app.directoryModelsList[_directoryIndex].materials[_categoryIndex][_materialIndex].material.order = _toMaterial;
                        app.directoryModelsList[_directoryIndex].materials[_categoryIndex][_toMaterial].material.order = _fromMaterial;

                    }
                    else
                        alert(textStatus);
                }, "json");
                //debugger;
            },


        }
            })

            $(document).on('hidden.bs.modal', '.modal', function () {
                
                if ($('.modal').hasClass('show')) {
                    $('body').addClass('modal-open');
                }
                  /*var activeModal = $('.modal.show:last', 'body').data('bs.modal');
    
                    if (activeModal) {
                        activeModal.$body.addClass('modal-open');
                        activeModal.enforceFocus();
                        activeModal.handleUpdate();
                    }*/
            })

            //$('.modal').on('hidden.bs.modal', function () {
            //    alert('hidden event fired!');
            //});

            //$('.modal').on('shown.bs.modal', function () {
            //    alert('show event fired!');
            //});

            //$('.modal').on('hidden.bs.modal', function (e) {
            //    debugger
            //    if ($('.modal').hasClass('in')) {
            //        $('body').addClass('modal-open');            
            //    }

            //    /*  var activeModal = $('.modal.in:last', 'body').data('bs.modal');
    
            //if (activeModal) {
            //    activeModal.$body.addClass('modal-open');
            //    activeModal.enforceFocus();
            //    activeModal.handleUpdate();
            //}*/
            //});
    $(document).ready(function () {
        app.loadData();
      
      
        //$('#summernote').summernote();
    })

</script>
