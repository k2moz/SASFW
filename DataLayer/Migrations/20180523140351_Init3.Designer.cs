// <auto-generated />
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace DataLayer.Migrations
{
    [DbContext(typeof(EFDBContext))]
    [Migration("20180523140351_Init3")]
    partial class Init3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Entities.CommonEntities.CustumFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustumContentId");

                    b.Property<int>("CustumFieldId");

                    b.Property<int?>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CustumContentId");

                    b.HasIndex("CustumFieldId");

                    b.ToTable("CustumFieldValues");
                });

            modelBuilder.Entity("DataLayer.Entities.CommonEntities.SiteWebPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("LastUpdateDateTime");

                    b.Property<int?>("Order");

                    b.Property<string>("PageHtml");

                    b.Property<string>("PageName");

                    b.Property<string>("PageScripts");

                    b.Property<string>("PageStyles");

                    b.Property<string>("SeoDescription");

                    b.Property<string>("SeoTitle");

                    b.Property<string>("SeoUrl");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.Property<string>("bigPreview");

                    b.Property<string>("smallPreview");

                    b.HasKey("Id");

                    b.ToTable("Pages");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SiteWebPage");
                });

            modelBuilder.Entity("DataLayer.Entities.CustumContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Html");

                    b.Property<int?>("MaterialId");

                    b.Property<int?>("Order");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("CustumContent");
                });

            modelBuilder.Entity("DataLayer.Entities.CustumField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("CustumFields");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Pass");

                    b.Property<int>("Role");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataLayer.Entities.CommonEntities.Directory", b =>
                {
                    b.HasBaseType("DataLayer.Entities.CommonEntities.SiteWebPage");

                    b.Property<int?>("ItemsPerPage");

                    b.Property<bool>("OpenDirectoryPagesWithAjax");

                    b.ToTable("Directory");

                    b.HasDiscriminator().HasValue("Directory");
                });

            modelBuilder.Entity("DataLayer.Entities.CommonEntities.Material", b =>
                {
                    b.HasBaseType("DataLayer.Entities.CommonEntities.SiteWebPage");

                    b.Property<string>("Category");

                    b.Property<int>("DirectoryId");

                    b.HasIndex("DirectoryId");

                    b.ToTable("Material");

                    b.HasDiscriminator().HasValue("Material");
                });

            modelBuilder.Entity("DataLayer.Entities.CommonEntities.CustumFieldValue", b =>
                {
                    b.HasOne("DataLayer.Entities.CustumContent", "CustumContent")
                        .WithMany("Fields")
                        .HasForeignKey("CustumContentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataLayer.Entities.CustumField", "CustumField")
                        .WithMany()
                        .HasForeignKey("CustumFieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataLayer.Entities.CustumContent", b =>
                {
                    b.HasOne("DataLayer.Entities.CommonEntities.Material", "Material")
                        .WithMany("ContentsList")
                        .HasForeignKey("MaterialId");
                });

            modelBuilder.Entity("DataLayer.Entities.CommonEntities.Material", b =>
                {
                    b.HasOne("DataLayer.Entities.CommonEntities.Directory", "Directory")
                        .WithMany("DirectoryPages")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
